/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import domain.entity.Customer;
import domain.tableModel.CustomerTableModel;
import infra.repository.memory.CustomerRepositoryMemoryDAO;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author Wesley Gomes
 */
public class frmCustomerInfo extends javax.swing.JFrame {
    CustomerRepositoryMemoryDAO customerRepositoryMemoryDAO = new CustomerRepositoryMemoryDAO();
    
    private final CustomerTableModel customerTable = new CustomerTableModel();

    /**
     * Creates new form frmCustomerInfo
     */
    public frmCustomerInfo() {
        initComponents();
        initTableComponents();        
    }

    private void initTableComponents() {
        customerTable.addColumn("Nome");
        customerTable.addColumn("CPF");
        customerTable.addColumn("Telefone");
        customerTable.addColumn("Endereço");
        tblCustomer.setModel(customerTable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCustomer = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        dfsName = new javax.swing.JTextField();
        dfsPhone = new javax.swing.JTextField();
        dfnNumber = new javax.swing.JTextField();
        dfsAddress = new javax.swing.JTextField();
        dfsCity = new javax.swing.JTextField();
        dfsCpf = new javax.swing.JTextField();
        dfsState = new javax.swing.JTextField();
        labelCpf = new javax.swing.JLabel();
        labelNumber = new javax.swing.JLabel();
        labelState = new javax.swing.JLabel();
        labelName = new javax.swing.JLabel();
        labelPhone = new javax.swing.JLabel();
        labelCity = new javax.swing.JLabel();
        labelAddress = new javax.swing.JLabel();
        buttonClean = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        buttonSave = new javax.swing.JButton();
        buttonUpdate = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuFileItem_Exit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome", "CPF", "Telefone", "Endereço"
            }
        ));
        tblCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCustomerMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCustomer);

        labelCpf.setText("CPF:");

        labelNumber.setText("Número:");

        labelState.setText("Estado:");

        labelName.setText("Nome:");

        labelPhone.setText("Telefone:");

        labelCity.setText("Cidade:");

        labelAddress.setText("Endereço:");

        buttonClean.setText("Limpar");
        buttonClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCleanActionPerformed(evt);
            }
        });

        buttonDelete.setText("Excluir");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        buttonSave.setText("Salvar");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        buttonUpdate.setText("Atualizar");
        buttonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buttonClean)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(labelName)
                        .addComponent(labelPhone)
                        .addComponent(labelCity)
                        .addComponent(labelAddress)))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dfsName, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                            .addComponent(dfsPhone)
                            .addComponent(dfsCity)
                            .addComponent(dfsAddress))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelCpf)
                            .addComponent(labelNumber)
                            .addComponent(labelState))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dfsCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(dfsState, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                                .addComponent(dfnNumber, javax.swing.GroupLayout.Alignment.LEADING))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonSave)))
                .addContainerGap(237, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dfsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelCpf)
                    .addComponent(labelName)
                    .addComponent(dfsCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dfsPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPhone))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dfsAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelAddress))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dfsCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelCity)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dfnNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelNumber))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dfsState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelState))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonClean)
                    .addComponent(buttonDelete)
                    .addComponent(buttonSave)
                    .addComponent(buttonUpdate))
                .addContainerGap())
        );

        menuFile.setLabel("Opções");

        menuFileItem_Exit.setLabel("Sair");
        menuFileItem_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileItem_ExitActionPerformed(evt);
            }
        });
        menuFile.add(menuFileItem_Exit);

        jMenuBar1.add(menuFile);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuFileItem_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileItem_ExitActionPerformed
        int result = JOptionPane.showConfirmDialog(this, "Realmente deseja sair?", "Sair", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION || result == JOptionPane.CLOSED_OPTION) System.exit(0);
    }//GEN-LAST:event_menuFileItem_ExitActionPerformed

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        try {
            checkFormData();
            setMaskFormFields();
            Customer customer = new Customer(dfsName.getText().trim(), cleanCpfFormat(dfsCpf.getText().trim()), cleanPhoneFormat(dfsPhone.getText().trim()), dfsAddress.getText().trim(), cleanNumberFormat(dfnNumber.getText().trim()), dfsCity.getText().trim(), dfsState.getText().trim());
            customer.validateCpf();
            customerRepositoryMemoryDAO.save(customer);
            customerTable.addRow(new Object[]{dfsName.getText(), dfsCpf.getText(), dfsPhone.getText(), dfsAddress.getText()});
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        try {
            customerRepositoryMemoryDAO.delete(cleanCpfFormat(dfsCpf.getText()));
            customerTable.removeRow(getCustomerTableRow(dfsCpf.getText()));
            cleanFormFields();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateActionPerformed
        try {
            checkFormData();
            setMaskFormFields();
            Customer customer = new Customer(dfsName.getText().trim(), cleanCpfFormat(dfsCpf.getText().trim()), cleanPhoneFormat(dfsPhone.getText().trim()), dfsAddress.getText().trim(), cleanNumberFormat(dfnNumber.getText().trim()), dfsCity.getText().trim(), dfsState.getText().trim());
            customerRepositoryMemoryDAO.update(customer);            
            updateCustomerTableValues(getCustomerTableRow(dfsCpf.getText()));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonUpdateActionPerformed

    private void buttonCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCleanActionPerformed
        cleanFormFields();
    }//GEN-LAST:event_buttonCleanActionPerformed

    private void tblCustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCustomerMouseClicked
        int selectedRow = tblCustomer.getSelectedRow();
        String cpf = customerTable.getValueAt(selectedRow, customerTable.findColumn("CPF")).toString();
        Customer customer = customerRepositoryMemoryDAO.getByCpf(cleanCpfFormat(cpf));        
        setFormFields(customer);        
    }//GEN-LAST:event_tblCustomerMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmCustomerInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmCustomerInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmCustomerInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmCustomerInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmCustomerInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClean;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonSave;
    private javax.swing.JButton buttonUpdate;
    private javax.swing.JTextField dfnNumber;
    private javax.swing.JTextField dfsAddress;
    private javax.swing.JTextField dfsCity;
    private javax.swing.JTextField dfsCpf;
    private javax.swing.JTextField dfsName;
    private javax.swing.JTextField dfsPhone;
    private javax.swing.JTextField dfsState;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelAddress;
    private javax.swing.JLabel labelCity;
    private javax.swing.JLabel labelCpf;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelNumber;
    private javax.swing.JLabel labelPhone;
    private javax.swing.JLabel labelState;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuFileItem_Exit;
    private javax.swing.JTable tblCustomer;
    // End of variables declaration//GEN-END:variables

    public Long cleanCpfFormat(String cpf) {
        return cpf.trim().isEmpty() ? null : Long.valueOf(cpf.replaceAll("[^0-9]", ""));
    }
    
    public String maskCpfFormat(String cpf) {
        return cpf.trim().isEmpty() ? null : cpf.replaceAll("(\\d{3})(\\d{3})(\\d{3})(\\d{2})", "$1.$2.$3-$4");
    }
    
    public Long cleanPhoneFormat(String phone) {
        return phone.trim().isEmpty() ? null : Long.valueOf(phone.replaceAll("[^0-9]", ""));
    }
    
    public String maskPhoneFormat(String phone) {
        return phone.trim().isEmpty() ? null : phone.replaceAll("(\\d{2})(\\d{4,5})(\\d{4})", "($1) $2-$3");
    }    

    public Integer cleanNumberFormat(String number) {
        return number.trim().isEmpty() ? null : Integer.valueOf(number.replaceAll("[^0-9]", ""));
    }
    
    public Integer getCustomerTableRow(String cpf) {
        List<Vector> data = customerTable.getDataVector();
        int cpfColumnIndex = customerTable.findColumn("CPF");
        for (int i = 0; i < data.size(); i++) {
            Vector customer = data.get(i);
            if (customer.elementAt(cpfColumnIndex).equals(cpf)) return i;
        }
        return null;
    }
    
    public void updateCustomerTableValues (int row){
        customerTable.setValueAt(dfsName.getText(), row, customerTable.findColumn("Nome"));
        customerTable.setValueAt(dfsCpf.getText(), row, customerTable.findColumn("CPF"));
        customerTable.setValueAt(dfsPhone.getText(), row, customerTable.findColumn("Telefone"));
        customerTable.setValueAt(dfsAddress.getText(), row, customerTable.findColumn("Endereço"));
    }
    
    public void cleanFormFields (){
        dfsName.setText(null);
        dfsCpf.setText(null);
        dfsPhone.setText(null);
        dfsAddress.setText(null);
        dfnNumber.setText(null);
        dfsCity.setText(null);
        dfsState.setText(null);
    }
    
    public void setFormFields (Customer customer){
        dfsName.setText(customer.getName());
        dfsCpf.setText(maskCpfFormat(customer.getCpf().toString()));
        dfsPhone.setText(maskPhoneFormat(customer.getPhone().toString()));
        dfsAddress.setText(customer.getAddr());
        dfnNumber.setText(customer.getAddrNumber().toString());
        dfsCity.setText(customer.getCity());
        dfsState.setText(customer.getState());
    }
    
    private void checkFormData() throws Exception {              
        if (existNullFields()) throw new Exception("Todos os campos devem ser preenchidos!");
    }

    public boolean existNullFields() {
        return isTextFieldEmpty(dfsName)
                || isTextFieldEmpty(dfsCpf)
                || isTextFieldEmpty(dfsPhone)
                || isTextFieldEmpty(dfsAddress)
                || isTextFieldEmpty(dfnNumber)
                || isTextFieldEmpty(dfsCity)
                || isTextFieldEmpty(dfsState);
    }

    private boolean isTextFieldEmpty(JTextField textField) {
        return textField.getText().trim().isEmpty();
    }

    private void setMaskFormFields() {
        dfsCpf.setText(maskCpfFormat(dfsCpf.getText().trim()));
        dfsPhone.setText(maskPhoneFormat(dfsPhone.getText().trim()));
    }
}
